class Node {
    double data;
    Node next;

    // Constructor to initialize the node with data
    public Node(double data) {
        this.data = data;
        this.next = null;
    }
}

public class StackLinkedList {
    private Node top;

    // Constructor to initialize an empty stack
    public StackLinkedList() {
        this.top = null;
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return top == null;
    }

    // Method to push an element onto the stack
    public void push(double data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            top = newNode;
        } else {
            newNode.next = top;
            top = newNode;
        }
    }

    // Method to pop an element from the stack
    public double pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot pop item.");
            return Double.NaN; // returning NaN to signify an error
        } else {
            double poppedItem = top.data;
            top = top.next;
            return poppedItem;
        }
    }

    // Method to display the elements of the stack
    public void display() {
        Node current = top;
        System.out.print("The elements of the stack are: ");
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        StackLinkedList stack = new StackLinkedList();

        // Pushing elements onto the stack
        stack.push(10.0);
        stack.push(20.0);
        stack.push(30.0);
        stack.push(40.0);

        stack.display();

        // Popping twice from the stack
        stack.pop();
        stack.pop();

        System.out.print("After popping twice: ");
        stack.display();
    }
}
